trigger: none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: validate_terraform
    jobs:
      - job:
        displayName: publish artifact to pipeline workspace and validate the terraform manifest
        steps:
          -  task: PublishPipelineArtifact@1
             displayName: Publish artifact
             inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              artifact: 'terraformaks'
              publishLocation: 'pipeline'
          - task: TerraformInstaller@0
            displayName: Install terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-svc'
              backendAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              backendAzureRmResourceGroupName: 'terraform-tfstate-storage'
              backendAzureRmStorageAccountName: 'tfstatestoragebatch5'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: false
  - stage: plan_terraform
    displayName: terraform plan
    dependsOn:
       - "validate_terraform"
    jobs:
      - job: "terraformjobs"
        displayName: "Terraform > Install Init Plan"
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-svc'
              backendAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              backendAzureRmResourceGroupName: 'terraform-tfstate-storage'
              backendAzureRmStorageAccountName: 'tfstatestoragebatch5'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Plan
            inputs:
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              environmentServiceName: 'terraform-aks-svc'
              providerAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraformplan.out'
              allowTelemetryCollection: false
              publishPlanResults: 'terraformplan.out'
          # - task: TerraformCLI@0
          #   displayName: Terraform show
          #   inputs:
          #     command: 'show'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)'
          #     allowTelemetryCollection: false
          #     inputTargetPlanOrStateFilePath: '$(System.DefaultWorkingDirectory)/terraformplan.out'
          - bash: |
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = false ] ; then
                echo "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                echo "##vso[task.logissue type=warning]Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = true ] ; then
                echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                echo "##vso[task.logissue type=warning]Changes with Destroy detected, pipeline will require a manual approval to proceed"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" != true ] ; then
                echo "##vso[task.logissue type=warning]No changes detected, terraform apply will not run"
              fi              
            name: "setvar"
            displayName: "Vars > Set Variables for next stage"
  - stage: "autoTerraform"
    displayName: "Terraform - Auto Approval"
    dependsOn:
      - "plan_terraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.plan_terraform.outputs['TerraformJobs.setvar.HAS_CHANGES_ONLY'], 'true')
        )      
    jobs:
      - job: "TerraformAuto"
        displayName: "Terraform > install, init & apply"
        steps:
          - task: TerraformInstaller@0
            displayName: Install terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-svc'
              backendAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              backendAzureRmResourceGroupName: 'terraform-tfstate-storage'
              backendAzureRmStorageAccountName: 'tfstatestoragebatch5'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: false

          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              environmentServiceName: 'terraform-aks-svc'
              providerAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              allowTelemetryCollection: false
  - stage: "approveTerraform"
    displayName: "Terraform - Manual Approval"
    dependsOn:
      - "plan_terraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.plan_terraform.outputs['TerraformJobs.setvar.HAS_DESTROY_CHANGES'], 'true')
        )      
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: 4320 # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                                sumit.shanker@epam.com
              instructions: "There are resources being destroyed as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "TerraformApprove"
        displayName: "Terraform > install, init & apply"
        dependsOn: "waitForValidation"
        steps:
          - task: TerraformInstaller@0
            displayName: Install terraform
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-svc'
              backendAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              backendAzureRmResourceGroupName: 'terraform-tfstate-storage'
              backendAzureRmStorageAccountName: 'tfstatestoragebatch5'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: false

          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraformtest/aks_provision'
              environmentServiceName: 'terraform-aks-svc'
              providerAzureRmSubscriptionId: '01a0d38e-38ad-442e-be3f-ad1e760bd4f5'
              allowTelemetryCollection: false